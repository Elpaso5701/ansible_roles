---
- hosts: db
  become: yes
  tasks:
    - name: Start message
      debug:
        msg: 'Create task to install and prepare DB server'

    - name: Install PostgreSQL
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
        update_cache: yes

    - name: Ensure PostgreSQL service is started and enabled
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Create database
      postgresql_db:
        name: "{{ db_name }}"
        state: present

    - name: Create database user
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        role_attr_flags: CREATEDB,CREATEROLE
        login_host: localhost
        login_user: postgres
      tags: postgresql_user

- hosts: server
  become: true
  vars:
    domain: app-for-devops
    app_path: /var/www/app-for-devops
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Apache web server
      apt:
        name: apache2
        state: present

    - name: Install PHP and required modules
      apt:
        name: 
          - php
          - libapache2-mod-php
          - php-pgsql
          - php-mbstring
          - php-xml
          - php-curl
          - php-json
          - composer
        state: present

    - name: Clone application repository
      git:
        repo: https://github.com/Practical-DevOps/app-for-devops.git
        dest: "{{ app_path }}"
        force: yes
        version: main

    - name: Run composer install
      command: composer install 
      args:
        chdir: "{{ app_path }}"

    - name: Copy .env.example to .env
      command: cp {{ app_path }}/.env.example {{ app_path }}/.env

    - name: Generate application key
      command: php artisan key:generate
      args:
        chdir: "{{ app_path }}"
    
    - name: Set DB connection details in .env file
      lineinfile:
        dest: "{{ app_path }}/.env"
        regexp: '^DB_{{ item.key }}='
        line: 'DB_{{ item.key }}={{ item.value }}'
      loop:
        - { key: 'CONNECTION', value: 'pgsql' }
        - { key: 'HOST', value: 'localhost' }
        - { key: 'PORT', value: '5432' }
        - { key: 'DATABASE', value: '{{ db_name }}' }
        - { key: 'USERNAME', value: '{{ db_user }}' }
        - { key: 'PASSWORD', value: '{{ db_pass }}' }

    - name: Run database migrations
      command: php artisan migrate
      args:
        chdir: "{{ app_path }}"

    - name: Set permissions for user www-data
      ansible.builtin.file:
        path: "{{ app_path }}"
        owner: www-data
        group: www-data
        mode: 0755
        recurse: yes

    - name: Enable mod_rewrite
      apache2_module:
        state: present
        name: rewrite
      notify:
        - restart apache2
        
    - name: Create virtual host file
      template: src=virtualhost.conf dest=/etc/apache2/sites-available/000-default.conf
      notify:
        - restart apache2

    - name: Install Node.js and NPM
      apt:
        name:
          - nodejs
          - npm
        state: present

    - name: Install frontend dependencies
      npm:
        path: "{{ app_path }}"
        state: present     

    - name: Build frontend assets
      command: npm run build
      args:
        chdir: "{{ app_path }}" 

  handlers:
    - name: restart apache2
      service: name=apache2 state=restarted
